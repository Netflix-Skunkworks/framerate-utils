{"version":3,"file":"framerate-utils.cjs.production.min.js","sources":["../src/utils/string.ts","../src/index.ts"],"sourcesContent":["export function pad(n: number) {\n    if (n < 10) {\n        return `0${n.toString(10)}`;\n    } else {\n        return n.toString(10);\n    }\n}\n\nexport function padMs(n: number) {\n    if (n < 10) {\n        return `00${n.toString(10)}`;\n    } else if (n < 100) {\n        return `0${n.toString(10)}`;\n    } else {\n        return n.toString(10);\n    }\n}\n","import { pad, padMs } from './utils/string';\n\nconst { round, ceil, floor, max } = Math;\n\nexport const SECONDS_PER_HOUR = 60 * 60;\nexport const SECONDS_PER_MINUTE = 60;\nexport const MILLISECONDS_PER_SECOND = 1000;\nexport const TICKS_PER_SECOND = 10000000;\n\nexport const RATE_23_976 = create(24, 1000, 1001);\nexport const RATE_24 = create(24, 1, 1);\nexport const RATE_25 = create(25, 1, 1);\nexport const RATE_29_97 = create(30, 1000, 1001);\nexport const RATE_29_97_DROP = create(30, 1000, 1001, true);\nexport const RATE_30 = create(30, 1, 1);\nexport const RATE_48 = create(48, 1, 1);\nexport const RATE_50 = create(50, 1, 1);\nexport const RATE_59_94 = create(60, 1000, 1001);\nexport const RATE_59_94_DROP = create(60, 1000, 1001, true);\nexport const RATE_60 = create(60, 1, 1);\n\nexport const DEFAULT_FRAME_RATE = RATE_23_976;\n\n/*\n * Adjustment required to account for rounding of input data.\n * For example:\n * frame 836 @ 24fps = 34.83333333333333s\n * This can be rounded by input format to 34833ms\n * 34833ms @ 24fps is frame 835.992 which will be treated as frame 835.\n * To adjust for this 0.001s will be added before truncating.\n *\n * Update: Rounding with CAP files can cause up to 2ms difference, so update\n * rounding to up to 2ms.\n */\nexport const FRAME_ROUNDING = 0.002;\n\nexport interface FrameRate {\n  rate: number;\n  numerator: number;\n  denominator: number;\n  fps: number;\n  dropFrame: boolean;\n}\n\nexport function create(\n    rate = 24,\n    numerator = 1,\n    denominator = 1,\n    dropFrame = false\n): FrameRate {\n  return {\n    rate,\n    numerator,\n    denominator,\n    fps: rate * numerator / denominator,\n    dropFrame,\n  };\n}\n\nexport function secondsToSmpte(frameRate: FrameRate, seconds: number) {\n  return frameToSmpte(frameRate, secondsToFrame(frameRate, seconds));\n}\n\nexport function smpteToSeconds(frameRate: FrameRate, smpte: string) {\n  return frameToSeconds(frameRate, smpteToFrame(frameRate, smpte));\n}\n\nexport function smpteToMs(frameRate: FrameRate, smpte: string) {\n  return ceil(smpteToSeconds(frameRate, smpte) * MILLISECONDS_PER_SECOND);\n}\n\nexport function msToSmpte(frameRate: FrameRate, ms: number)\n{\n  return secondsToSmpte(frameRate, ms / MILLISECONDS_PER_SECOND);\n}\n\nexport function smpteToTicks(frameRate: FrameRate, smpte: string)\n{\n  return ceil(smpteToSeconds(frameRate, smpte) * TICKS_PER_SECOND);\n}\n\nexport function ticksToSmpte(frameRate: FrameRate, ticks: number)\n{\n  return secondsToSmpte(frameRate, ticks / TICKS_PER_SECOND);\n}\n\nexport function secondsToFrame(frameRate: FrameRate, seconds: number)\n{\n  const frame = (seconds * frameRate.fps) + (FRAME_ROUNDING * frameRate.fps);\n  return floor(frame);\n}\n\nexport function msToFrame(frameRate: FrameRate, ms: number)\n{\n  return secondsToFrame(frameRate, ms / MILLISECONDS_PER_SECOND);\n}\n\nexport function frameToMs(frameRate: FrameRate, frame: number)\n{\n  return ceil(frameToSeconds(frameRate, frame) * MILLISECONDS_PER_SECOND);\n}\n\nexport function ticksToFrame(frameRate: FrameRate, ticks: number)\n{\n  return secondsToFrame(frameRate, ticks / TICKS_PER_SECOND);\n}\n\nexport function frameToTicks(frameRate: FrameRate, frame: number)\n{\n  return ceil(frameToSeconds(frameRate, frame) * TICKS_PER_SECOND);\n}\n\nexport function frameToSmpte(frameRate: FrameRate, frame: number)\n{\n  const extra = extraFrames(frameRate, frame);\n  const seconds = (frame + extra) / frameRate.rate;\n  const f = round((seconds - floor(seconds)) * frameRate.rate);\n  const h = floor(seconds / SECONDS_PER_HOUR);\n  const m = floor((seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE);\n  const s = floor((seconds % SECONDS_PER_MINUTE));\n  const frameSeparator = frameRate.dropFrame ? ';' : ':';\n\n  return `${pad(h)}:${pad(m)}:${pad(s)}${frameSeparator}${pad(f)}`;\n}\n\n/**\n * Return the number of extra frames required to convert drop frame to\n * SMPTE timecode.\n * Based on calculation from http://andrewduncan.net/timecodes/\n *          D = frameNumber div 17982\n *          M = frameNumber mod 17982\n *          frameNumber +=  18*D + 2*((M - 2) div 1798)\n *\n * @param {FrameRate} frameRate The frame rate to use for conversion\n * @param {Number} frame The actual number of frames\n * @returns {Number} The extra frames required\n */\nexport function extraFrames(frameRate: FrameRate, frame: number)\n{\n  if (!frameRate.dropFrame) {\n    return 0;\n  }\n\n  const D = floor(frame / 17982);\n  const M = frame % 17982;\n\n  return max(0, (18 * D) + (2 * (floor((M - 2) / 1798))));\n}\n\nexport function smpteToFrame(frameRate: FrameRate, smpte: string)\n{\n  const parts = smpte.split(/:|;/);\n  let h, m, s, f;\n\n  if (parts.length === 3) {\n    h = 0;\n    m = parseInt(parts[0]);\n    s = parseInt(parts[1]);\n    f = parseInt(parts[2]);\n  } else if (parts.length === 4) {\n    h = parseInt(parts[0]);\n    m = parseInt(parts[1]);\n    s = parseInt(parts[2]);\n    f = parseInt(parts[3]);\n  } else {\n    return 0;\n  }\n\n  const seconds = (h * SECONDS_PER_HOUR) + (m * SECONDS_PER_MINUTE) + s;\n  let frames = (seconds * frameRate.rate) + f;\n\n  if (frameRate.dropFrame) {\n    const dropped = (h * 54 + m - floor(m / 10)) * 2;\n\n    frames -= dropped;\n  }\n\n  return frames;\n}\n\nexport function frameToSeconds(frameRate: FrameRate, frame: number)\n{\n  return frame / frameRate.fps;\n}\n\nexport function seekByFrames(frameRate: FrameRate, fromTimeSeconds: number, frameDelta: number)\n{\n  const frame = secondsToFrame(frameRate, fromTimeSeconds);\n  return seekToFrame(frameRate, frame + frameDelta);\n}\n\nexport function seekToFrame(frameRate: FrameRate, frame: number)\n{\n  const newTime = frameToSeconds(frameRate, frame);\n  const halfFrame = frameToSeconds(frameRate, 1) / 2;\n\n  // add half frame to ensure the resulting time is in the frame\n  return newTime + halfFrame;\n}\n\nexport function toFrameTime(frameRate: FrameRate, seconds: number)\n{\n  return seekByFrames(frameRate, seconds, 0);\n}\n\nexport function mediaToSeconds(media: string) {\n  const parts = media.split(/:|\\.|,/);\n  let h, m, s, ms;\n\n  if (parts.length === 4) {\n    h = parseInt(parts[0]);\n    m = parseInt(parts[1]);\n    s = parseInt(parts[2]);\n    ms = parseInt(parts[3]);\n  } else {\n    return 0;\n  }\n\n  var seconds = h * SECONDS_PER_HOUR + m * SECONDS_PER_MINUTE + s;\n  return seconds + ms / 1000;\n}\n\nexport function secondsToMedia(seconds: number) {\n  var sec = floor(seconds);\n  var ms = round((seconds - sec) * MILLISECONDS_PER_SECOND);\n  var h = floor(sec / SECONDS_PER_HOUR);\n  var m = floor(sec % SECONDS_PER_HOUR / SECONDS_PER_MINUTE);\n  var s = floor(sec % SECONDS_PER_MINUTE);\n\n  return pad(h) + ':' + pad(m) + ':' + pad(s) + '.' + padMs(ms);\n}\n\nexport function mediaFramesToSeconds(fr: FrameRate, media: string) {\n  var parts = media.split(/:/);\n  let h, m, s, f;\n\n  if (parts.length === 4) {\n    h = parseInt(parts[0]);\n    m = parseInt(parts[1]);\n    s = parseInt(parts[2]);\n    f = parseInt(parts[3]);\n  } else {\n    return 0;\n  }\n\n  var seconds = h * SECONDS_PER_HOUR + m * SECONDS_PER_MINUTE + s;\n  return seconds + f / fr.fps;\n}\n\nexport function secondsToMediaFrames(fr: FrameRate, seconds: number) {\n  var sec = floor(seconds);\n  var f = round((seconds - sec) * fr.fps);\n  var h = floor(sec / SECONDS_PER_HOUR);\n  var m = floor(sec % SECONDS_PER_HOUR / SECONDS_PER_MINUTE);\n  var s = floor(sec % SECONDS_PER_MINUTE);\n\n  return pad(h) + ':' + pad(m) + ':' + pad(s) + ':' + pad(f);\n}\n\nexport function ticksToSeconds(ticks: number) {\n  return ticks / TICKS_PER_SECOND;\n}\n\nexport function secondsToTicks(seconds: number) {\n  return floor(seconds * TICKS_PER_SECOND);\n}\n\nexport function msToSeconds(ms: number) {\n  return ms / MILLISECONDS_PER_SECOND;\n}\n\nexport function secondsToMs(seconds: number) {\n  return seconds * MILLISECONDS_PER_SECOND;\n}\n\nexport function fromTag(tag: string) {\n  switch (tag) {\n    case 'FPS_2397':\n      return RATE_23_976;\n    case 'FPS_24':\n      return RATE_24;\n    case 'FPS_2400':\n      return RATE_24;\n    case 'FPS_25':\n      return RATE_25;\n    case 'FPS_2500':\n      return RATE_25;\n    case 'FPS_2997':\n      return RATE_29_97_DROP;\n    case 'FPS_30':\n      return RATE_30;\n    case 'FPS_3000':\n      return RATE_30;\n    case 'FPS_4800':\n      return RATE_48;\n    case 'FPS_50':\n      return RATE_50;\n    case 'FPS_5000':\n      return RATE_50;\n    case 'FPS_5994':\n      return RATE_59_94_DROP;\n    case 'FPS_60':\n      return RATE_60;\n    case 'FPS_6000':\n      return RATE_60;\n    default:\n      throw new TypeError(`Unknown Frame Rate ${tag}`);\n  }\n}\n"],"names":["pad","n","toString","round","Math","ceil","floor","max","RATE_23_976","create","RATE_24","RATE_25","RATE_29_97","RATE_29_97_DROP","RATE_30","RATE_48","RATE_50","RATE_59_94","RATE_59_94_DROP","RATE_60","rate","numerator","denominator","dropFrame","fps","secondsToSmpte","frameRate","seconds","frameToSmpte","secondsToFrame","smpteToSeconds","smpte","frameToSeconds","smpteToFrame","frame","extraFrames","f","h","m","s","frameSeparator","D","parts","split","length","parseInt","frames","seekByFrames","fromTimeSeconds","frameDelta","seekToFrame","tag","TypeError","fr","media","ms","sec","ticks"],"mappings":"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"}